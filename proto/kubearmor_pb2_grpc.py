# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.kubearmor_pb2 as kubearmor__pb2


class LogServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/feeder.LogService/HealthCheck',
                request_serializer=kubearmor__pb2.NonceMessage.SerializeToString,
                response_deserializer=kubearmor__pb2.ReplyMessage.FromString,
                )
        self.WatchMessages = channel.unary_stream(
                '/feeder.LogService/WatchMessages',
                request_serializer=kubearmor__pb2.RequestMessage.SerializeToString,
                response_deserializer=kubearmor__pb2.Message.FromString,
                )
        self.WatchAlerts = channel.unary_stream(
                '/feeder.LogService/WatchAlerts',
                request_serializer=kubearmor__pb2.RequestMessage.SerializeToString,
                response_deserializer=kubearmor__pb2.Alert.FromString,
                )
        self.WatchLogs = channel.unary_stream(
                '/feeder.LogService/WatchLogs',
                request_serializer=kubearmor__pb2.RequestMessage.SerializeToString,
                response_deserializer=kubearmor__pb2.Log.FromString,
                )


class LogServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchAlerts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=kubearmor__pb2.NonceMessage.FromString,
                    response_serializer=kubearmor__pb2.ReplyMessage.SerializeToString,
            ),
            'WatchMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchMessages,
                    request_deserializer=kubearmor__pb2.RequestMessage.FromString,
                    response_serializer=kubearmor__pb2.Message.SerializeToString,
            ),
            'WatchAlerts': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchAlerts,
                    request_deserializer=kubearmor__pb2.RequestMessage.FromString,
                    response_serializer=kubearmor__pb2.Alert.SerializeToString,
            ),
            'WatchLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchLogs,
                    request_deserializer=kubearmor__pb2.RequestMessage.FromString,
                    response_serializer=kubearmor__pb2.Log.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'feeder.LogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LogService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/feeder.LogService/HealthCheck',
            kubearmor__pb2.NonceMessage.SerializeToString,
            kubearmor__pb2.ReplyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/feeder.LogService/WatchMessages',
            kubearmor__pb2.RequestMessage.SerializeToString,
            kubearmor__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchAlerts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/feeder.LogService/WatchAlerts',
            kubearmor__pb2.RequestMessage.SerializeToString,
            kubearmor__pb2.Alert.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/feeder.LogService/WatchLogs',
            kubearmor__pb2.RequestMessage.SerializeToString,
            kubearmor__pb2.Log.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PushLogServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/feeder.PushLogService/HealthCheck',
                request_serializer=kubearmor__pb2.NonceMessage.SerializeToString,
                response_deserializer=kubearmor__pb2.ReplyMessage.FromString,
                )
        self.PushMessages = channel.stream_stream(
                '/feeder.PushLogService/PushMessages',
                request_serializer=kubearmor__pb2.Message.SerializeToString,
                response_deserializer=kubearmor__pb2.ReplyMessage.FromString,
                )
        self.PushAlerts = channel.stream_stream(
                '/feeder.PushLogService/PushAlerts',
                request_serializer=kubearmor__pb2.Alert.SerializeToString,
                response_deserializer=kubearmor__pb2.ReplyMessage.FromString,
                )
        self.PushLogs = channel.stream_stream(
                '/feeder.PushLogService/PushLogs',
                request_serializer=kubearmor__pb2.Log.SerializeToString,
                response_deserializer=kubearmor__pb2.ReplyMessage.FromString,
                )


class PushLogServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushMessages(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushAlerts(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushLogs(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PushLogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=kubearmor__pb2.NonceMessage.FromString,
                    response_serializer=kubearmor__pb2.ReplyMessage.SerializeToString,
            ),
            'PushMessages': grpc.stream_stream_rpc_method_handler(
                    servicer.PushMessages,
                    request_deserializer=kubearmor__pb2.Message.FromString,
                    response_serializer=kubearmor__pb2.ReplyMessage.SerializeToString,
            ),
            'PushAlerts': grpc.stream_stream_rpc_method_handler(
                    servicer.PushAlerts,
                    request_deserializer=kubearmor__pb2.Alert.FromString,
                    response_serializer=kubearmor__pb2.ReplyMessage.SerializeToString,
            ),
            'PushLogs': grpc.stream_stream_rpc_method_handler(
                    servicer.PushLogs,
                    request_deserializer=kubearmor__pb2.Log.FromString,
                    response_serializer=kubearmor__pb2.ReplyMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'feeder.PushLogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PushLogService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/feeder.PushLogService/HealthCheck',
            kubearmor__pb2.NonceMessage.SerializeToString,
            kubearmor__pb2.ReplyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushMessages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/feeder.PushLogService/PushMessages',
            kubearmor__pb2.Message.SerializeToString,
            kubearmor__pb2.ReplyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushAlerts(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/feeder.PushLogService/PushAlerts',
            kubearmor__pb2.Alert.SerializeToString,
            kubearmor__pb2.ReplyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushLogs(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/feeder.PushLogService/PushLogs',
            kubearmor__pb2.Log.SerializeToString,
            kubearmor__pb2.ReplyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
